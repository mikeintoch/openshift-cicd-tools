---
- name: Setup and installing sso demo.
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:

    - include: setup.yaml

    - name: Login in OpenShift
      shell: "oc login --insecure-skip-tls-verify=true -u {{ username }} -p {{ password }} {{ openshift_console }}"
      tags:
        - openshift

    - name: Define project = {{ project_name }}
      shell: "oc project {{ project_name }}"
      tags:
        - openshift

- name: Installing Gogs App.
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:

    - name: Creating Gogs App
      shell: "oc new-app -f {{ gogs_template }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - gogs

    - name: Getting gogs hostname.
      shell: "oc get routes | grep gogs | awk '{print $2}'"
      register: command_result
      tags:
        - openshift
        - gogs

    - name: Getting Gogs Router Hostname {{ ':' }} {{ command_result.stdout_lines[0] }}
      set_fact: gogs_hostname=http://{{ command_result.stdout_lines[0] }}
      tags:
        - openshift
        - gogs

    - name: Getting password from Postgresql deployment config.
      shell: "oc set env dc/postgresql --list | grep -v \\{{ '#' }} | grep POSTGRESQL_PASSWORD | awk -F '=' '{print $2}'"
      register: command_result

    - name: Getting password from Postgresql deployment config {{ ':' }} {{ command_result.stdout_lines[0] }}
      set_fact: pgsql_password={{ command_result.stdout_lines[0] }}
      tags:
        - openshift
        - gogs

    - debug:
        var: pgsql_password

    - name: Waiting to start gogs.
      shell: "curl --silent {{ gogs_hostname }}"
      register: result
      until: result.stdout.find("Found") != -1
      retries: 20
      delay: 15

    - name: Waiting for PostgreSQL Pod
      pause:
        minutes: 3
      tags:
        - install_openshift

    - name: Configuring gogs server.
      shell: "curl -o /dev/null -vL --post302 -w \"%{http_code}\" {{ gogs_hostname }}/install \
            --form db_type=PostgreSQL \
            --form db_host=postgresql:5432 \
            --form db_user=gogs \
            --form db_passwd={{ pgsql_password }} \
            --form db_name=gogs \
            --form ssl_mode=disable \
            --form \"app_name=Gogs: Go Git Service\" \
            --form repo_root_path=/var/tmp \
            --form run_user=gogs \
            --form domain=localhost \
            --form ssh_port=22 \
            --form http_port=3000 \
            --form app_url={{ gogs_hostname }} \
            --form log_root_path=/opt/gogs/log \
            --form admin_name={{ gogs_admin_user }} \
            --form admin_passwd={{ gogs_admin_password }} \
            --form admin_confirm_passwd={{ gogs_admin_password }} \
            --form admin_email=admin@gogs.com"
      register: result

    - name: Delete previous app.ini file
      file:
        path: ./tmp/app.ini
        state: absent
      tags:
        - openshift
        - gogs

    - name: Get app.ini configuration for configmap
      shell: "oc exec $(oc get pods | grep gogs | awk '{print $1}') -- cat /etc/gogs/conf/app.ini > ./tmp/app.ini"
      register: command_result
      tags:
        - openshift
        - gogs

    - name: Replacing SKIP_TLS_VERIFY in app.ini file
      lineinfile:
        path: ./tmp/app.ini
        regexp: '^SKIP_TLS_VERIFY'
        line: 'SKIP_TLS_VERIFY = true'
      tags:
        - openshift
        - gogs

    - name: Creating Gogs Configmap
      shell: 'oc create configmap gogs --from-file=appini=./tmp/app.ini'
      register: command_result
      tags:
        - openshift
        - gogs

    - name: Adding configmap to deployment config.
      shell: "oc set volume dc/gogs --add --overwrite --name=config-volume -m /etc/gogs/conf/ --source='{\"configMap\":{\"name\":\"gogs\",\"items\":[{\"key\":\"appini\",\"path\":\"app.ini\"}]}}'"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - gogs

- name: Installing Nexus App
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: Creating Nexus App
      shell: "oc new-app -f {{ nexus_template }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - nexus

- name: Adding Nexus Repositories
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: Getting json files to add.
      find:
        paths: resources/repos/
        patterns: '*.json'
      register: repos_to_add

    - name: Getting nexus hostname.
      shell: "oc get routes | grep nexus | awk '{print $2}'"
      register: command_result
      tags:
        - openshift

    - name: Getting Nexus Router Hostname {{ ':' }} {{ command_result.stdout_lines[0] }}
      set_fact: nexus_hostname=http://{{ command_result.stdout_lines[0] }}
      tags:
        - create_nodes

 #    - name: Waiting to start nexus.
 #     shell: "curl --silent -u admin:admin123 {{ nexus_hostname }}/service/metrics/healthcheck"
 #     register: result
 #     until: result.stdout.find("true") != -1
 #     retries: 20
 #     delay: 15
    - name: Waiting to start nexus
      pause:
        minutes: 3
      tags:
        - install_openshift


#    - name: Adding nexus components.
#      shell: "curl -v -u admin:admin123 --header \"Content-Type: application/json\" \"{{ nexus_hostname }}/service/rest/v1/script/\" -d @\"{{ item.path }}\""
#      register: command_result
#      with_items: "{{ repos_to_add.files }}"
#      tags:
#        - openshift

#    - name: Adding nexus components.
#      shell: "curl -v -X POST -u admin:admin123 --header \"Content-Type: text/plain\" \"{{ nexus_hostname }}/service/rest/v1/script/{{ item.name }}/run\""
#      register: command_result
#      with_items: "{{ nexus_repositories }}"
#      tags:
#        - openshift

- name: Installing Sonarqube
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: Creating Sonarqube App
      shell: "oc new-app -f {{ sonar_template }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - sonar

- name: Installing Jenkins App
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: Login with admin user.
      shell: "oc login --insecure-skip-tls-verify=true -u {{ admin_username }} -p {{ admin_password }} {{ openshift_console }}"
      register: command_result
      tags:
        - openshift

    - name: Changing to openshift project.
      shell: "oc project openshift"
      register: command_result
      tags:
        - openshift

    - name: Create BuildConfig custom jenkins image.
      shell: "oc create -f https://raw.githubusercontent.com/mikeintoch/jenkins/master/custom-jenkins.build.yaml"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - jenkins
        - openshift

    - name: Start Building custom jenkins image.
      shell: "oc start-build custom-jenkins-build --follow"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - jenkins
        - openshift
